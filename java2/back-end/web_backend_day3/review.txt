cookie & session
why?
http protocol - stateless
cookie 
- 클라이언트의 브라우저에 정보 저장
- request -> server에서 쿠기 생성 -> response를 통해 쿠키 전달 -> request를 통해 쿠키 전달 -> 서버에서 사용
- 쿠키에서는 문자열만 사용 가능
- 쿠키의 주요 요소들
 name : key - 영문, 숫자
 value : 값 - 영문, 숫자, 한글... 기타 문자들 - :,  URLEncoder.encode() <--> URLDecoder.decode()
 maxAge : 양수 (sec) - 지정된 기간동안 생존, 0 - 유통기한 소멸: 바로 폐기, 음수 (생략) - session cookie
 path : 쿠키가 저장되는 위치, 기본값 : 생성된는 서블릿의 경로
  - 쿠키 생성 : Cookie cookie = new Cookie(name, value);
 				cookie.setMaxAge(10); 
 				response.addCookie(cookie); // response에 담았을 뿐, 보내지는 않았다
 				// 클라이언트에 응답이 갈때 전송 됨....
 				암호화가 요즘은 필수!!
  - 쿠키 확인 : Cookie [] cookies = request.getCookies();
  - 쿠키 수정 : map 계열 - > 키가 중복되면 동일 path에 있는 기존 쿠키 업데이트
  - 쿠키 삭제 : 동일 키를 가지고 유효기간을 0으로 처리 
  				-> 이 쿠키를 클라이언트에 보내야 브라우저에서 삭제
  				
서버에서 데이터(attribute)를 저장하는 영역								jsp에서는 내장객체 활용
PageContext(현재 페이지에서만)											page 
		< HttpServletRequest(forward 호출 시) 							request
				< HttpSession(브라우저 닫기 전) 						session
						< ServletContext(WAS가 종료되기 전까지 유지)  	application

session 
- 쿠키와 달리 서버의 메모리에 정보 저장
- 쿠키와 달리 모든 데이터 타입(object) 저장 가능
- 최소한의 쿠키 사용 (JESSIONID) : 세션 공간에 들어가는 열쇠!!!
- 유효기간
  1. web.xml에 설정 : 분단위로 지정(기본값 30분) <- 권장사항
  2. setMaxInactiveInterval()
- 생성
  HttpSession session = request.getSession();							session 내장객체 사용
- 사용법
  session.setAttribute("key", "value");
  Object val = session.getAttribute("key");
  session.removeAttribute("key");
- 소멸
  session 유효기간 종료 시점
  session.invalidate() 호출 시 
 
 쿠키의 유효기간 : 한번 설정되면 쭉~
 세션의 유효기간 : 활동 시 그 시점부터 다시 체크






