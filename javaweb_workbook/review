웹 애플리케이션 아키텍처의 특징
- 웹 서버 : 클라이언트와 통신 / 다중 클라이언트의 접속 관리
- 애플리케이션 서버 : 비즈니스 로직 / 데이터 관리  / 사용자 접근 관리 / UI 생성
- 웹 브라우저 : 사용자와 상호작용 / UI 렌더링
- DBMS 서버 : 데이터 처리

GET 요청
- 웹 브라우저 주소창에 URL을 입력하는 경우
- 링크 클릭하는 경우
- 입력 폼의 method 속성값이 get인경우
-> 자료 검색, 게시글의 상세 정보, 특정 상품의 정보 조회 같은 데이터 조회의 경우 적합 
- 보안에 취약함 : 주소창에 사용자가 입력한 정보가 그대로 노출
			  즐겨찾기, 책갈피로 저장될 수 ㅣㅇㅆ음.
- 바이너리 데이터를 전송할 수 없다.
Post 요청
- 입력값을 URL에 노출하지 않는다.
- 요청 결과를 공유할 수 없다. 
- 바이너리 및 대용량 전송 가능

서블릿 
- 웹서버 <--> 서블릿 컨테이너 <--> 서블릿
- 서블릿 컨테이너 : 서블릿의 생성, 실행, 소멸 등 생명주기를 관리하는 프로그램
- 서블릿 인터페이스
  - 서블릿 컨테이너 ---- 호출 ---> 서블릿
  				init()/ service() / destroy() / getServletInfo() / getServletConfig()
  - 서블릿 생명주기위 관련된 메서드  init() -> 서블릿 생성 시 한번 호출/ service() / destroy() -> 종료 시 호출 
 - 서블릿 구동 절차
 
 - GenericServlet : 추상 클래스
 - ServletRequest : 
   - getParameter() : GET 이나 POST 요청으로 들어온 매개 변수 값을 꺼낼 때 사용
 - ServletResponse :
   - 응답과 관련된 기능 제공, 데이터의 인코딩 타입 설정, 임시 보관 버퍼 크기 조정, 데이터 출력 스트림 준비시 사용
   - setContentType() : 출력 데이터의 인코딩 형식과 문자 집합 지정
   - setCharaterEncoding() : 문자 집합 지정 ("UTF-8")
   - getWriter() : 클라이언트로 출력할 수 있도록 출력 스트림 객체 반환 
   	 PrintWriter writer = response.getWriter();
- @WebServlet 애노테이션을 이용한 서블릿 배치 정보 설정
  - @(WebServlet("/calc")
- @WebServlet 주요 속성 
  - name : 서블릿 이름 / urlPatterns : 서블릿 url 목록 설정 
  -value : urlPatterns 과 같은 용도 
  
  
  Statement : 질의할때마다 sql문 컴파일 / 바이너리 데이터 전송불가능 / sql문 안에 매개변수 값이 포함되어 있어 복잡하고 관리가 힘들다
  PreparedStatement : sql문을 미리 준비하여 컴파일, 매개변수 ㄱ밧만 추가해 서버에 전성 여러번 반복하는 경우 빠름 / 바이너리데이터 전송 간으/ 매개변수와 sql문이 분리되어 코드 작성이 편리
  
 MVC 이점
 - 높은 재사용성, 넓은 융통성
 - 빠른 개발, 저렴한 비용  

 
 데이터 보관소
 - ServletContext : 웹 애플리케이션 시작시 생성되어 웹 애플리케이션 종료까지 유지
 - HttpSession : 클라이언트 최초 요청 시 생성되어 브라우저 닫을 때까지 유지 
 - ServeltRequest : 클라이언트 요청 시 생성 되어 클라이언트에게 응답할때까지 유지
 - jspContext : jsp페이지 실행동안 유지 
 
 HttpSession : 클라이언트 당 한개가 생성 
 - 웹브라우저로부터 요청들어오면 생성 / 일정시간 요청 없으면 삭제
 
 JSP 액션 태크
 - scope 속성 
  - page : JspContext / rerquest : ServletRequest / session : HttpSession / application : ServletContext
  - 기본은 page
  
<jsp:useBean> 액션 사용시 자바 객체를 생성하거나 request 객체에서 값을 꺼내는 작업을 쉽게 처리할 수 있다.

EL : 자바 빈의 프로퍼티나 맵, 리스트, 배열 값을 보다 쉽게 꺼내주는 기술
- 검색 범위 지정
- pageScope : JspContext
- reqeustScope : ServletRequest
- sessionScope : HttpSession
- applicationScope : ServletContext


의존성 주입 : 필요한 객체를 외부로부터 주입 받는 것

서블릿 컨테이너 : 웹 애플리케이션 상태를 모니터링 할 수 있도록 웹 애플리케이션의 시작에서 종료까지 주요 사건에 대해 알림 기능 제공

DB 커넥션 풀
- DB 커넥션 객체를 여러 개 생성해 풀에 담아놓고 필요시 꺼내 쓰는 방식

DataSource
- 서버에서 관리하기에 데이터베이스 or JDBC 드라이버가 변경되도 애플리케이션 바꿀 필요 없음
- DATASOURCE 사용하면 CONNECTION과 STATEMENT객체를 풀링할 수 있고 분산 트랜잭션을 다룰 수 있다.

memberlistcontroller가 작업 수행시 데이터베이스로부터 회원 정보를 가져다즐 memberdao 필요한데 이렇게 특정 작업 수행시 사용하는 객체를 의존 객체라한다.
이러한 관계를 의존 관계라 함.


리플랙션 API
- 인스턴스를 자동 생성하고 메서드를 자동으로 호출하는 방법을 통해 개선하기
- 클래스나 메서드의 내부구조를 들여다 볼 때 사용하는 도구
- class.newInstance() : 주어진 클래스의 인스턴스 생성
- class.getName() : 클래스의 이름 반화
- class.getMethods() : 클래스에 선언된 모든 public 메서드의 목록을 배열로 반환
- Method.invoke() 해당 메서드 호출
- Method.getParameterTypes() : 매서드의 매개변수 목록을 배열로 반환

DI를 이용한 빈 의존성 관리
- 의존 객체를 외부에서 주입
- Bean Container는 객체가 실행되기전 필요로하는 의존 객체를 주입해 주는 역할 수행  -> 이러한 방식으로 관리하는 것을 의존성 주입이라함.

퍼시스턴스 프레임워크
- jdbc 프로그래밍의 복잡함, 번거로움 없이 간단한 작업으로 데이터베이스와 연동 

mybatis : 개발과 유지보수가 쉽도록 sql을 별도 파일로 분리
- SqlSession : 실제 sql을 사용하는 객체, sql을 처리하기위해 jdbc 드라이버 사용
- SqlSessionFactory : SqlSession 객체를 생성
- SqlSessionFactoryBuilder : mysql 설정 파일의 내용을 토대로 sqlsessionfactory를 생성함.
- mybatis 설정 파일 : 데이터베이스 연결 정보, 트랜잭션 정보, mybatis 제어 정보 등의 설정 내용을 포함 
- SQL 맵퍼 파일 : SQL 문을 담고 있는 파일 Sqlsession 객체가 참조함.

sqlsession 에는 selectlist, selectone, insert, update, delete 메서드 있음.


역제어

